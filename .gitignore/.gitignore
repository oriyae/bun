class bundeling:
    
    def knn(X,n_neighbors=2):
        from sklearn.neighbors import NearestNeighbors
        model=NearestNeighbors()
        model.fit(X)
       
        knn=model.kneighbors(X, n_neighbors, return_distance=False)
        return knn
    
    def pca(X,n_components=5):
        from sklearn.decomposition import PCA
        model_dim=PCA(n_components)
        model_dim.fit(X)
        X11=model_dim.transform(X)
        return X11
    
    def kmeans(X,n_clusters=6):
        from sklearn.cluster import KMeans
        model_KM=KMeans(n_clusters=6)
        model_KM.fit(X11)
        Y=model_KM.predict(X11)
        return Y
    
    def kmeans_plot(data,range1):
        from sklearn.cluster import KMeans
        import matplotlib.pyplot as plt

        sse = {}
        for k in range1:
            
        
            kmeans = KMeans(n_clusters=k, max_iter=1000).fit(data)
            data1 = kmeans.labels_
            #print(data["clusters"])
            sse[k] = kmeans.inertia_ # Inertia: Sum of distances of samples to their closest cluster center
        plt.figure()
        plt.plot(list(sse.keys()), list(sse.values()))
        plt.xlabel("Number of cluster")
        plt.ylabel("SSE")
        plt.show()
        
        
